# ===================================================================
# Spring Boot configuration for the "prod" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
  level:
    ROOT: INFO
    tech.jhipster: INFO
    com.formos.huub: INFO

management:
  prometheus:
    metrics:
      export:
        enabled: false

spring:
  config:
    import: quartz.yml
  servlet:
    multipart:
      max-file-size: 1GB
      max-request-size: 1GB
      enabled: true
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:postgresql://localhost:5432/huub
    username: huub
    password:
    hikari:
      poolName: Hikari
      auto-commit: false
  # Replace by 'prod, faker' to add the faker context and have sample data loaded in production
  liquibase:
    contexts: prod
  mail:
    host: localhost
    port: 25
    username:
    password:
  thymeleaf:
    cache: true

# ===================================================================
# To enable TLS in production, generate a certificate using:
# keytool -genkey -alias huub -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# See details in topic "Create a Java Keystore (.JKS) from Let's Encrypt Certificates" on https://maximilian-boehm.com/en-gb/blog
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#
# server:
#   port: 443
#   ssl:
#     key-store: classpath:config/tls/keystore.p12
#     key-store-password: password
#     key-store-type: PKCS12
#     key-alias: selfsigned
#     # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
#     ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
# ===================================================================
server:
  port: 8080
  shutdown: graceful # see https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-graceful-shutdown
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,application/javascript,application/json,image/svg+xml
    min-response-size: 1024
  max-http-request-header-size: 1MB

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  http:
    cache: # Used by the CachingHttpHeadersFilter
      timeToLiveInDays: 1461
  cache: # Cache configuration
    ehcache: # Ehcache configuration
      time-to-live-seconds: 3600 # By default objects stay 1 hour in the cache
      max-entries: 1000 # Number of objects in each cache entry
  cors:
    # Allow Ionic for JHipster by default (* no longer allowed in Spring Boot 2.4+)
    allowed-origins: 'https://huub.formos.org'
    # Enable CORS when running in GitHub Codespaces
    allowed-origin-patterns: 'https://*.githubpreview.dev'
    allowed-methods: '*'
    allowed-headers: '*'
    exposed-headers: 'Authorization,Link,X-Total-Count,X-${jhipster.clientApp.name}-alert,X-${jhipster.clientApp.name}-error,X-${jhipster.clientApp.name}-params'
    allow-credentials: true
    max-age: 1800
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
        # As this is the PRODUCTION configuration, you MUST change the default key, and store it securely:
        # - In the Consul configserver
        # - In a separate `application-prod.yml` file, in the same folder as your executable JAR file
        # - In the `JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET` environment variable
        base64-secret: N2E3NDQ0YjIxOTY0NjY0MmEwZDg2YTQ2MWU3Yjc4ZjIwYWYwODEzZGRhZWY1ZWMyOWJjZTE1MzNmN2VjZmMzNjA2YzgwMjIzNDE2YjQ4YzY3ZjE2MWIzYTc4ODgzZGZiNDk5ZDEzMDMxMDRiYjY4MWQ5Y2NlZjBjMGQ3NjUyZDc=
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 2592000
  mail: # specific JHipster mail property, for standard properties see MailProperties
    base-url: http://my-server-url-to-change # Modify according to your server's URL
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000
      ring-buffer-size: 512
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:
application:
  reset-password:
    reset-key-validity-in-seconds: 3600
  invite-technical-advisor:
    invite-token-validity-in-seconds: 7776000
  client-app:
    base-url: https://huub.formos.org/#
    base-url-portal: https://%s.huub.formos.org/#
    base-custom-url-portal: '%s/#'
  customer-care:
    join-huub-support: contact@myhuub.com
    join-huub-live-chat: https://direct.lc.chat/12091353/

client-app:
  base-url: https://huub.formos.org/#

springdoc:
  show-login-endpoint: true
swagger:
  sever:
    name: Huub
    title: Huub API
    version: 3.0
    description: Open API documentation
  url:
    dev: http://localhost:8080
    prod: http://com.formos.huub:8080

#AWS properties
image:
  sizeOfAvatar: 200
cloud:
  region: us-west-2
  stack:
    auto: false
  credentials:
    accessKey: xxx
    secretKey: xxx
  bucket:
    name: huub-staging
  preSigned:
    url-expiration: 120 #seconds
  provider: aws
  cloudfront-url:
google:
  clientId: xxx.apps.googleusercontent.com
  clientSecret: xxx
  calendarId: primary
  redirectUri: https://huub.formos.org/api/oauth2/google/callback
microsoft:
  client-id: xxx
  client-secret: xxx
  redirect-uri: https://huub.formos.org/api/oauth2/microsoft/callback
  authority: https://login.microsoftonline.com/common
  scopes: user.read Calendars.ReadBasic Calendars.Read Calendars.ReadWrite openid profile offline_access
facebook:
  client-id: xxx
  client-secret: xxx
  redirect-uri: https://huub.formos.org/api/oauth2/facebook/callback
eventbrite:
  single-event-url: https://www.eventbriteapi.com/v3/events/%s
  venue-detail-url: https://www.eventbriteapi.com/v3/venues/%s
  organizer-url: https://www.eventbriteapi.com/v3/organizers/%s
  event-attendees-url: https://www.eventbriteapi.com/v3/events/%s/attendees
  attendee-url: https://www.eventbriteapi.com/v3/events/%s/attendees/%s
  organizer-events-url: https://www.eventbriteapi.com/v3/organizers/%s/events?status=live
  organizations-url: https://www.eventbriteapi.com/v3/users/me/organizations/
  organization-events-url: https://www.eventbriteapi.com/v3/organizations/%s/events?status=live
  api-token: xxx
active-campaign:
  base-url: https://{accountName}.api-us1.com/api/{apiVersion}
  account-name: xxx
  api-version: 3
  access-key: xxx
firebase:
  service-account-path: classpath:config/firebase/firebase-adminsdk-uat.json
  real-time-database-url: https://huub-stg-uat-default-rtdb.firebaseio.com
schedule:
  sync:
    retry-times: 3
  remove-event-in-seconds: 2592000
metabase:
  site-url: xxx
  secret-key: xxx
custom-domain:
  primary-domain: huub.formos.org
  treat-www-as-subdomain: true

sendgrid:
  key: xxx
  sender: noreply@formos-dn.online
  display-name: Huub System

twilio:
  account-sid:
  auth-token:
  phone-number:

webhook-key:
  eventbrite: xxx

system-configuration:
  mailSlack: xxxx
